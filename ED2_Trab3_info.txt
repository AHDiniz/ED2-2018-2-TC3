/******************************************************************************
 *  Relatório do Trabalho 3 -- ED2 -- 2018/2
 *  Password Cracking
 *****************************************************************************/

Nome 1: Alan Herculano Diniz
Nome 2: Rafael Belmock Pedruzzi
SO utilizado: Linux (labgrad)
Versão do compilador utilizado: 5.4.0 20160609
Editor(es) de código utilizado(s): VS Code
Número de horas gastas para fazer o trabalho (aproximado): 30h

/******************************************************************************
 *  Se você usou o arquivo key.c, descreva qualquer modificação/otimização que
 *  você tenha feito no código. Se você não utilizou key.c, descreva a
 *  estrutura de dados que você utilizou para manipular as senhas.
 *****************************************************************************/
    Foi utilizado o arquivo key.c com as seguintes modificações:
        - Foi incluida a biblioteca string.h.
        - Foi incluida a função compare para comparar duas keys.

/******************************************************************************
 *  Descreva a sua solução força bruta (brute.c) .
 *****************************************************************************/
    A solução força bruta implementada utiliza uma simples lógica recursiva 
    para calcular todas as possiveis combinações dos elementos de T. A partir
    da seguinte função:

    void force(Key *encrypted, Key T[], int binpass[], 
                            Key pSum, int k, bool change);

    Onde binpass é um vetor que armazena as posições dos valores somados de T 
    até o nível atual da recursão, pSum é a soma destes valores, k é a posição
    de T acessada neste nível e change é uma variável auxiliar que evita a
    repetição de comparações.

    Tendo em vista a forma de acesso a T no lógica de encriptação, cada posição
    de T pode ser somada no máximo 1 vez. Dessa forma a função force executa
    apenas quatro funcionalidades essenciais:

        1°- comparar a soma anterior com o valor da senha encriptada e plotar
            a chave correspondente caso sejam iguais.
        2º- executar recursão de force para o k seguinte.
        3º- somar a chave na k-ésima posição de T a soma anterior.
        4º- executar novamente a recursão para o k seguinte utilizando a nova
            soma.

/******************************************************************************
 *  Faça uma descrição de alto nível do seu programa de quebra de senha
 *  (decrypt.c).
 *****************************************************************************/

    O programa para quebrar senhas usa um algoritmo parecido ao força bruta descrito
    anteriormente, porém, ele ele seleciona um subconjunto com todas as combinações
    feitas com as últimas K senhas da tabela T. Os itens desse subconjunto são
    inseridos em uma tabela de símbolos, para que não seja necessário reconstruí-las
    todas as vezes que elas forem necessárias. Ou seja, o algoritmo age como o força
    bruta até que ele chega no subconjunto salvo na tabela de símbolos, e depois procura
    as combinações nessa tabela.

/******************************************************************************
 *  Descreva a implementação da tabela de símbolos que você utilizou em
 *  decrypt.c .
 *****************************************************************************/

    A tabela de símbolos possui uma implementação relativamente simples.
    Basicamente, ela é uma tabela hash na qual o tratamento de colisões é ralizado
    com o uso de listas duplamente encadeadas em cada posição do vetor principal.
    A função hash simplesmente recebe um inteiro e usa o resto da divisão desse
    inteiro pelo tamanho máximo do vetor como a chave dos itens. Isso foi feito
    para que a estrutura se encaixasse da melhor forma no problema considerando
    o tempo disponível.

/******************************************************************************
 *  Liste abaixo as versões não criptografadas das senhas fornecidas na
 *  especificação do trabalho. Faça isso SOMENTE se você foi capaz de quebrar
 *  as senhas usando o SEU código.
 *****************************************************************************/

8 caracteres          10 caracteres             12 caracteres
------------          -------------             -------------
xwtyjjin -> congrats  h554tkdzti -> completely
            ibqfehan
rpb4dnye -> mqubzd45  oykcetketn -> unbreakabl
            youfound
kdidqv4i -> theright  bkzlquxfnt -> cryptogram
m5wrkdge -> aeiqrsd4  wixxliygk1 -> ormaybenot
            solution
1.2  segundo

/******************************************************************************
 *  Quanto tempo a versão força bruta leva para quebrar as senhas de um dado
 *  tamanho? Forneça estimativas com um asterisco se o programa levar mais do
 *  que a sua paciência (por exemplo, um ou dois minutos). Justifique as suas
 *  estimativas.
 *****************************************************************************/

Tamanho     Tempo (segundos)
----------------------------
 4          0,145
 5          3,855
 6          2m5,619
 8          35h*

 *: O tempo de execução cresce exponencialmente com relação ao número de bits 
 na senha. Como cada carácter adiciona 5 bits a senha, o tempo de execução de 
 uma senha de x de caracteres, sendo N(x) o número de bits de uma senha de 
 tamanho x e F(x) o tempo de execução para uma senha de tamanho x, pode ser aproximado como:

           F(x-1) . [ 2^N(x) / 2^N(x-1) ] = 32 . F(x-1)

Desta forma, o tempo de execução do programa para uma senha de tamanho 8 será
aproximadamente 32 . 125.619 = 128633 segundos.

/******************************************************************************
 *  Quanto tempo decrypt.c leva para quebrar as senhas de um dado tamanho?
 *  Quanto de memória o programa utiliza? Forneça estimativas com um asterisco
 *  se o programa levar mais que a sua paciência ou utilizar mais memória que
 *  o seu sistema possui. Justifique as suas estimativas.
 *****************************************************************************/

Tamanho    Tempo (segundos)    Memória (bytes)
----------------------------------------------
 6          0,075               1.672.204
 8          1,064               51.512.340
10          1m00,145            1.677.721.600*
12

/******************************************************************************
 *  Quantas operações brute.c faz sobre uma senha com N bits?
 *  Quantas operações decrypt.c faz sobre uma senha com N bits?
 *  Utilize a notação de big-Oh nas suas respostas.
 *****************************************************************************/

    brute.c:
        Desconsiderando as funções que não dependem de N e operações
        básicas, a função recursiva executa 2^N vezes gerando 2^N somas de chaves,
        2^N acessos a T (na soma) e 2^(N-1) comparações entre chaves (devido a
        variável change, somente metade das funções chamadas executarão comparações
        entre chaves) gerando um crescimento O(2^N).

    decrypt.c:


/******************************************************************************
 *  Descreva qualquer problema grave que você encontrou ao desenvolver
 *  o trabalho.
 *****************************************************************************/


/******************************************************************************
 *  Deixe qualquer outro comentário aqui. Fique à vontade para dar um feedback
 *  sobre o quanto você acha que aprendeu com esse trabalho, e se você gostou
 *  de fazê-lo.
 *****************************************************************************/
