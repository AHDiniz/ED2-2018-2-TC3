PS: lembre de anotar as informações relevantes em ED2_Trab3_info.txt

Detalhes do problema:
    - Chaves compostas por C unsigned chars.
    - Cada carácter possui B bits (nesse trab B = 5 sempre).
    - Alfabeto = "abcdefghijklmnopqrstuvwxyz012345".
    - Numero de bits por senha = N = C * B.
    PS: Todas essas macros em key.h.
    - T eh uma tabela de N chaves.
    - Encriptação converte a senha para binário e usa as posições não nulas para acessar T, somando as chaves encontradas.
    - Resultado da soma eh a senha encriptada.

Idéia por trás do método força bruta: (que eu estou fazendo)
    - Devido a forma de acesso em T cada key só pode ser somada uma única vez.
    - Então, soma-se todas as possibilidades sem repetições.
    - Se for encontrado o valor desejado, printa-o.

Idéia por trás do método não força bruta: (que vc vai fazer o q der fim de semana)
    - S eh uma tabela de símbolos (implementação discutível) com todas as possíveis somas de um subconjunto de T.
    - S deve ser usada de alguma forma para agilizar as contas.

    Minhas idéias:
        - Subconjunto = T, computando todas as somas até um certo número de caracteres (Ex: Tosas as somas entre 2 caracteres, ou entre 2 e 3 caracteres etc)
        - Subconjunto < T, computando todas as somas entre eles.
    - Em ambos os casos usar S para agilizar as somas de algum jeito (Provavelmente usando o força bruta com as somas).

    Ideia Atual:
        - S é composto das K ultimas chaves de T.
        - Em brute force, as ultimas chaves são repetidamente avaliadas. Ao invez de soma-las novamente vamos resgatar o valor de suas possíveis somas de S e usa-los diretamente.
        - Problemas:
            1. Qual o valor de K?
                a) <= N / 2.
                b) Um número fixo para limitar o uso de memória.
            2. Como preencher S?
                a) Realizar as somas com antecedência.
                b) Realizar as somas durante a execução do brute force.
            3. Como acessar S?
                a)


Cálculo de memória:

Tamanho da chave = K

Tabela = 2^K elementos

Tamanho do elemento = 1 + 12 = 13 ou 25 bytes (dependendo da arquitetura)

